import chalk from 'chalk'

import { getLang } from './langDetect.mjs'

const messages = {
  zh: {
    cancelDeploy: 'üö™ Â∑≤ÂèñÊ∂àÈÉ®ÁΩ≤„ÄÇ',
    cancelInit: 'üö™ Â∑≤ÂèñÊ∂àÂàùÂßãÂåñ„ÄÇ',
    notInitialized: '‚ùå È°πÁõÆÊú™ÂàùÂßãÂåñÔºåËØ∑ÂÖàÊâßË°åÔºöwukong-deploy init',
    noServers: '‚ö†Ô∏è Êú™ÊâæÂà∞‰ªª‰ΩïÊúçÂä°Âô®ÈÖçÁΩÆÔºåËØ∑ÂÖàÊâßË°å wukong-deploy init ÂàùÂßãÂåñ',
    serverList: '\nüìã ÊúçÂä°Âô®ÂàóË°®Ôºö',
    serverFound: (name, host) => `\nüñ•Ô∏è  ${name} (${host})\n   ÈÉ®ÁΩ≤ÂëΩ‰ª§Ôºö`,
    commandDesc: (idx, desc, cmd) => `   ${idx}. ${desc}: ${cmd}`,
    getServerListFail: (msg) => `‚ùå Ëé∑ÂèñÊúçÂä°Âô®ÂàóË°®Â§±Ë¥•: ${msg}`,
    initError: (msg) => `ÂàùÂßãÂåñÈîôËØØ: ${msg}`,
    deployError: (msg) => `‚ùå ÈÉ®ÁΩ≤ËøáÁ®ã‰∏≠Âá∫Èîô: ${msg}`,
    configFileNotExist: (file) => `ÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®: ${file}`,
    configNoServers: 'ÈÖçÁΩÆÊñá‰ª∂‰∏≠Ê≤°ÊúâserversÂØπË±°',
    configLoadFail: (msg) => `Âä†ËΩΩÈÖçÁΩÆÊñá‰ª∂Â§±Ë¥•: ${msg}`,
    checkConfig: '\nËØ∑Ê£ÄÊü•ÈÖçÁΩÆÊñá‰ª∂config.mjs\n',
    envFileNotExist: (file) => `ÁéØÂ¢ÉÊñá‰ª∂‰∏çÂ≠òÂú®: ${file}`,
    configFormatError: '‚ùå ÈÖçÁΩÆÊñá‰ª∂Ê†ºÂºèÈîôËØØÔºåÁº∫Â∞ë default.servers ÂØπË±°',
    configKeyNotFound: (key) => `‚ùå ÈÖçÁΩÆ‰∏≠Êâæ‰∏çÂà∞ÊúçÂä°Âô® key: ${key}`,
    needKeyOrPwd: '‚ùå ËØ∑ÈÖçÁΩÆÁßÅÈí•ÊàñÂØÜÁ†ÅÁéØÂ¢ÉÂèòÈáè',
    foundServer: (name) => `ÊâæÂà∞ÊúçÂä°Âô®ÈÖçÁΩÆ: ${name}`,
    buildFinished: '‚úÖ Build finished',
    userCancel: '\nüö™ Áî®Êà∑ÂèñÊ∂à‰∫ÜÈÉ®ÁΩ≤ÔºàCtrl+CÔºâ',
    filesExist: (files) => `\n‚ö†Ô∏è  ‰ª•‰∏ãÊñá‰ª∂Â∑≤Â≠òÂú®Ôºö${files}`
  },
  en: {
    cancelDeploy: 'üö™ Deploy cancelled.',
    cancelInit: 'üö™ Init cancelled.',
    notInitialized:
      '‚ùå Project not initialized, please run: wukong-deploy init',
    noServers: '‚ö†Ô∏è No server config found, please run wukong-deploy init first',
    serverList: '\nüìã Server List:',
    serverFound: (name, host) => `\nüñ•Ô∏è  ${name} (${host})\n   Deploy commands:`,
    commandDesc: (idx, desc, cmd) => `   ${idx}. ${desc}: ${cmd}`,
    getServerListFail: (msg) => `‚ùå Failed to get server list: ${msg}`,
    initError: (msg) => `Init error: ${msg}`,
    deployError: (msg) => `‚ùå Deploy error: ${msg}`,
    configFileNotExist: (file) => `Config file not found: ${file}`,
    configNoServers: 'No servers object in config file',
    configLoadFail: (msg) => `Failed to load config: ${msg}`,
    checkConfig: '\nPlease check config.mjs\n',
    envFileNotExist: (file) => `Env file not found: ${file}`,
    configFormatError: '‚ùå Config file format error, missing default.servers',
    configKeyNotFound: (key) => `‚ùå Server key not found in config: ${key}`,
    needKeyOrPwd: '‚ùå Please configure private key or password env',
    foundServer: (name) => `Found server config: ${name}`,
    buildFinished: '‚úÖ Build finished',
    userCancel: '\nüö™ User cancelled deploy (Ctrl+C)',
    filesExist: (files) => `\n‚ö†Ô∏è  The following files already exist: ${files}`
  }
}

export function i18nLog(key, ...args) {
  const lang = getLang()
  const msgObj = messages[lang] || messages.en
  let msg = msgObj[key]
  if (typeof msg === 'function') {
    msg = msg(...args)
  }
  if (!msg) msg = key
  console.log(msg)
}

export function i18nError(key, ...args) {
  const lang = getLang()
  const msgObj = messages[lang] || messages.en
  let msg = msgObj[key]
  if (typeof msg === 'function') {
    msg = msg(...args)
  }
  if (!msg) msg = key
  console.error(chalk.red(msg))
}

export function i18nWarn(key, ...args) {
  const lang = getLang()
  const msgObj = messages[lang] || messages.en
  let msg = msgObj[key]
  if (typeof msg === 'function') {
    msg = msg(...args)
  }
  if (!msg) msg = key
  console.warn(chalk.yellow(msg))
}
